#! /usr/bin/env python3

import argparse
import os

parser = argparse.ArgumentParser(description='Generate lookup table for mem shuffle')
parser.add_argument('--deshuffle', action='store_true', help='generate deshuffle table')
parser.add_argument('--vrf_width', type=int, default=64, help='vrf data width')
parser.add_argument('--dir', type=str, default='generated', help='output directory')
# parser.add_argument('nr_lane', type=int, help='number of lanes')
# parser.add_argument('sew', type=int, help='element size in bits')

args = parser.parse_args()


def generate_table(sew, nr_lane):
    num_entries = args.vrf_width // 8 * nr_lane
    shuffle_table = [0] * num_entries
    deshuffle_table = [0] * num_entries
    num_bytes = sew // 8

    # When `index` indicates the index th byte in the memory, deshuffle_table[i]
    # indicates the corresponding index of the byte in the vrf.
    for i in range(num_entries):
        lane = (i // num_bytes) % nr_lane
        byte = i % num_bytes
        cnt = i // num_bytes // nr_lane
        deshuffle_table[i] = args.vrf_width // 8 * lane + cnt * num_bytes + byte

    # When `index` indicates the index th byte in the vrf, shuffle_table[i]
    # indicates the corresponding index of the byte in the memory.
    for i in range(num_entries):
        shuffle_table[deshuffle_table[i]] = i

    def print_table(table, is_shuffle, width, f):
        print("// generated by scripts/shuffle_table_generate.py\n", file=f)
        name = f"{'shuffle' if is_shuffle else 'deshuffle'}_table_vrf{args.vrf_width}_lane{nr_lane}_sew{sew}"
        print(f"localparam logic [{width-1}:0] {name}[{num_entries}] = {{", file=f)
        for i in range(0, num_entries, 8):
            s = [f'{table[i+j]}' for j in range(8)]
            print('\t', end="", file=f)
            print(", ".join(s), file=f,end="")
            if i != num_entries - 8:
                print(",", file=f)
            else:
                print("",file=f)
        print("};", file=f)


    width = num_entries.bit_length() - 1
    filename = f"{'deshuffle' if args.deshuffle else 'shuffle'}_table_vrf{args.vrf_width}_lane{nr_lane}_sew{sew}.svh"
    with open(f"{args.dir}/{filename}", "w") as file:
        if args.deshuffle:
            print_table(deshuffle_table, False, width, file)
        else:
            print_table(shuffle_table, True, width, file)

if not os.path.isdir(args.dir):
    os.makedirs(args.dir)

for sew in [8, 16, 32, 64]:
    for nr_lane in [2, 4, 8, 16]:
        generate_table(sew, nr_lane)
